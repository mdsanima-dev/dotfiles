#!/usr/bin/env bash

# Copyright (c) 2023-2024 MDSANIMA DEV. All rights reserved.
# Licensed under the MIT license.

# This is a script for printing text in colors with a fancy way in the terminal.
# Should be used only in shell script not in terminal directly.


# Arguments:
#     -fg <color>  Foreground color number or name, optional, default to none
#     -bg <color>  Background color number or name, optional, default to none
#     -nonewline   Don't print a new line after text, optional, default to false
#     <text>       Text to be printed in colors
#
# Usage:
#     source mdsanima-prints && source mdsanima-colors
#     __mds_color_print -fg <color> -bg <color> -nonewline <text>
#     __mds_color_print -fg 196 -bg 255 "red text on white background"
#     __mds_color_print -fg RED -bg WHITE "red text on white background"
#
# Printing text in colors
function __mds_color_print() {
    # Local variables
    local fg_color
    local bg_color
    local no_newline
    local text

    # Define color sequences
    local fg_seq="\e[38;5;"
    local bg_seq="\e[48;5;"
    local reset_code="\e[0m"

    # Define black bold error text on red background
    local _error_="${fg_seq}16;01m${bg_seq}196m ERROR ${reset_code}"

    # Define defaults red error text
    local color_error="${fg_seq}196m Color number must be between 0 and 255${reset_code}"
    local argument_error="${fg_seq}196m Unrecognized argument:${reset_code}"
    local no_text_error="${fg_seq}196m No text specified for coloring${reset_code}"

    # Default values
    no_newline=false

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -fg)
                if (( $2 > 255 )); then
                    echo -e "${_error_}${color_error}" >&2
                    return 1
                fi
                fg_color="$2"
                shift 2
                ;;
            -bg)
                if (( $2 > 255 )); then
                    echo -e "${_error_}${color_error}" >&2
                    return 1
                fi
                bg_color="$2"
                shift 2
                ;;
            -nonewline)
                no_newline=true
                shift 1
                ;;
            *)
                if [ -z "$text" ]; then
                    text="$1"
                else
                    echo -e "${_error_}${argument_error} $1" >&2
                    return 1
                fi
                shift 1
                ;;
        esac
    done

    # Show error if no text is specified
    if [ -z "$text" ]; then
        echo -e "${_error_}${no_text_error}" >&2
        return 1
    fi

    # Local color codes
    local fg_code
    local bg_code

    # Set color codes for foreground
    if [[ "$fg_color" =~ ^[0-9]+$ ]]; then
        fg_code="${fg_seq}${fg_color}m"
    elif [[ -v "$fg_color" ]]; then
        fg_code="${fg_seq}${!fg_color}m"
    fi

    # Set color codes for background
    if [[ "$bg_color" =~ ^[0-9]+$ ]]; then
        bg_code="${bg_seq}${bg_color}m"
    elif [[ -v "$bg_color" ]]; then
        bg_code="${bg_seq}${!bg_color}m"
    fi

    # Print text in colors
    if [[ "$no_newline" == true ]]; then
        echo -e -n "${fg_code}${bg_code}${text}${reset_code}"
    else
        echo -e "${fg_code}${bg_code}${text}${reset_code}"
    fi
}
