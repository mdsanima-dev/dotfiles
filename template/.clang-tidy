# Maintain a consistent coding style throughout the entire project codebase to
# ensure readability and maintainability.  Consistent style not only improves
# collaboration but also makes the code easier to review and debug.
#
# Configuration for clang-tidy check options that allow to write height quality
# C/C++ code, and better readability naming for better understanding the
# codebase, and the problem that you are going to solve.  The rules are applied
# to all code in the entire project.  For more information about, refer to the
# official documentation at:
#
#       https://clang.llvm.org/docs/ClangTidyCheckOptions.html
#
# The rules are still a work in progress and subject to change.  I still need
# to think about this configuration, and for now this is a base template.

---
Checks: "-*,bugprone-*,modernize-*,performance-*,readability-*"
CheckOptions:
  # Naming case options
  readability-identifier-naming.ClassCase: lower_case
  readability-identifier-naming.EnumCase: lower_case
  readability-identifier-naming.TypedefCase: lower_case
  readability-identifier-naming.TypedefSuffix: _t
  readability-identifier-naming.FunctionCase: lower_case
  readability-identifier-naming.MemberCase: lower_case
  readability-identifier-naming.ParameterCase: lower_case
  readability-identifier-naming.StructCase: lower_case
  readability-identifier-naming.UnionCase: lower_case
  readability-identifier-naming.VariableCase: lower_case
  # Naming case globals
  readability-identifier-naming.GlobalConstantCase: UPPER_CASE
  readability-identifier-naming.GlobalVariableCase: UPPER_CASE
  # Length options
  readability-identifier-length.MinimumParameterNameLength: 3
  readability-identifier-length.IgnoredParameterNames: ^(x|y|z)$
